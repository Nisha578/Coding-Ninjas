/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;

        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/


public class solution {
       public static LinkedListNode<Integer>  sortedMerge(LinkedListNode<Integer> a, LinkedListNode<Integer> b){
              LinkedListNode<Integer> result = null;
              
              if(a == null)
                return b;
              if(b == null)
                return a;
                
              if(a.data <= b.data) {
                 result = a;
                 result.next = sortedMerge(a.next,b);
              }
              else {
                result = b;
                result.next = sortedMerge(a,b.next);
              }
              return result;
       }
       
       public static LinkedListNode<Integer> getMid(LinkedListNode<Integer> head) {
              
              if(head == null) {
                 return head;
              }
              
              LinkedListNode<Integer> slow = head, fast = head;
              
              while(fast.next != null && fast.next.next != null) {
                    slow = slow.next;
                    fast = fast.next.next;
              }
              
              return slow;
       }
       
       public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
              if (head == null || head.next == null) {
                  return head;
              }
              
              LinkedListNode<Integer> mid = getMid(head);
              LinkedListNode<Integer> nextofmid = mid.next;
              
              mid.next = null;
              
              LinkedListNode<Integer> left = mergeSort(head);
              LinkedListNode<Integer> right = mergeSort(nextofmid);
              LinkedListNode<Integer> sortedlist = sortedMerge(left, right);
              return sortedlist;
            }
}
