/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

public class solution {
       public static LinkedListNode<Integer> evenAfterOdd(LinkedListNode<Integer> head) {
              if(head == null || head.next == null) {
                   return head;
              }
              LinkedListNode<Integer> oddhead = null;
              LinkedListNode<Integer> oddtail = null;
              
              LinkedListNode<Integer> evenhead = null;
              LinkedListNode<Integer> eventail = null;
              
              LinkedListNode<Integer> curr = head;
              
              while(curr != null) {
                   if(curr.data % 2 == 0) {
                      if(evenhead == null) {
                           evenhead = curr;
                           eventail = curr;
                      }
                      else {
                           eventail.next = curr;;
                           eventail = eventail.next;
                      }
                   }
                   else {
                        if(oddhead == null) {
                            oddhead = curr;
                            oddtail = curr;
                        }
                        else {
                            oddtail.next = curr;
                            oddtail = oddtail.next;
                        }
                   }
                   curr = curr.next;
              }
              
              if(oddhead == null) {
                 return evenhead;
              }
              
              else if(evenhead == null){
                   return oddhead;
              }
              
              else {
                  oddtail.next = evenhead;
                  eventail.next = null;
                  return oddhead;
              }
              
       }
}    
