/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.LinkedList;
import java.util.Queue;

public class Solution {

       public static void printLevelWise(BinaryTreeNode<Integer> root) {
              if(root == null) {
                    return;
              }
              
              Queue<BinaryTreeNode<Integer>> que = new LinkedList<>();
              
              que.add(root);
              que.add(null);
              
              while(!que.isEmpty()) {
                       
              BinaryTreeNode<Integer> newNode = que.poll();
              if(newNode == null) {
                 if(!que.isEmpty()) {
                     que.add(null);
                     System.out.println();
                 }
              }  else {
                    if(newNode.left != null)
                        que.add(newNode.left);
                     if(newNode.right != null)
                         que.add(newNode.right);
                         
                     System.out.print(newNode.data + " ");    
              }
              }
       }

}

