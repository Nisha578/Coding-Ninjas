/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {
              static int index = 0;  
       public static BinaryTreeNode<Integer> buildTree(int[] preOrder,int[] inOrder) {
                  return buildTreeUtil(preOrder,inOrder,0,preOrder.length-1);
       }
       
       public static BinaryTreeNodeInteger> buildTreeUtil(int[] preOrder,int[] inOrder,int low,int high) {
            if(low > high)
            return null;
            
            BinaryTreeNode<Integer> root = new BinaryTreeNode<>(preOrder[index]);
              int search_index = search(inOrder,preOrder[index],low,high);
              index++;
              
              root.left = buildTreeUtil(preOrder,inOrder,low,search_index - 1);
              root.right = bulidTreeUtil(preOrder,inOrder,search_index + 1,high);
              
       }
       
       public int search(int[] inOrder,int ele,int low,int high) {
              int search_index = -1;
              
              for(int i = low; i<=high; ++i {
                  if(inOrder[i] == ele) {
                      search_index = i;
                      break;
                  }
              }
              return search_index;
       }

}
