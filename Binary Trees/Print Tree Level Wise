/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.*;

public class Solution {
        
       public static void printLevelWise(BinaryTreeNode<Integer> root) {
              if(root == null) {
                  return;
              }
              Queue<BinaryTreeNode<Integer>> pendingNodes = new LinkedList<>();
              pendingNodes.add(root);
              
              while(!pendingNodes.isEmpty()) {
                    BinaryTreeNode<Integer> front = pendingNodes.poll();
                    System.out.print(front.data + ":");
                    
                    if(front.left != null) {
                         System.out.print("L:" + front.left.data + ",");
                         pendingNodes.add(front.left);
                    }
                    else {
                         System.out.print("L:-1,");
                    }
                    
                    if(front.right != null) {
                        System.out.println("R:" + front.right.data);
                        pendingNodes.add(front.right);
                    }
                    else {
                        System.out.println("R:-1,");
                    }
                    
                    }    
              }
       }
        
}
