import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.*;

public class Solution {
      
        public static void main(String[] args) throws NumberFormatException, IOException {
         
               Scanner s = new Scanner(System.in);
               int v = s.nextInt();
               int e = s.nextInt();
               int edges[][] = new int[v][v];
               for(int i =0; i<e; i++) {
                   int sv = s.nextInt();
                   int ev = s.nextInt();
                   edges[sv][ev] = 1;
                   edges[ev][sv] = 1;
               }
               int v1 = s.nextInt();
               int v2 = s.nextInt();
               boolean visited[] = new boolean[v];
               boolean ans = hasPath(edges,v1,v2,visited);
               System.out.println(ans);
        }
        
        public static boolean hasPath(int[][] edges,int v1,int v2,boolean visited[]) {
            
               if(v1 > edges.length-1 || v2 > edges.length-1) {
                       return false;
               }
               if(edges[v1][v2] == 1) 
                   return true;
               Queue<Integer> q = new LinkedList<>();
               q.add(v1);
               visited[v1] = true;
               while(!q.isEmpty()) { 
                    int n = q.remove();
                    for(int i = 0; i<edges.length; i++) {
                         if(edges[n][i] == 1 && !visited[i]) {
                              q.add(i);
                              visited[i] = true;
                         }
                         
                    }
               }
               if(visited[v2] == true)
                     return true;
               else
                     return false; 
        }
}
